import { NextRequest, NextResponse } from 'next/server';

interface EnhanceRequest {
  originalContent: string;
  url: string;
  systemPrompt?: string;
}

interface AIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

const DEFAULT_SYSTEM_PROMPT = `You are an expert web developer and designer. Your task is to enhance the provided website by creating a modern, responsive, and visually appealing version.

Guidelines for enhancement:
1. Preserve the original content and structure while improving the design
2. Use modern CSS techniques (Flexbox, Grid, CSS Variables)
3. Implement responsive design for mobile, tablet, and desktop
4. Improve typography with better font choices and spacing
5. Add subtle animations and transitions for better UX
6. Enhance color scheme with modern, accessible colors
7. Improve accessibility (ARIA labels, semantic HTML, contrast ratios)
8. Optimize layout for better visual hierarchy
9. Add modern UI elements like cards, buttons, and navigation
10. Ensure fast loading and performance optimization

Return ONLY a complete HTML file with embedded CSS. The CSS should be in a <style> tag in the <head> section. Do not include markdown code blocks or explanations.`;

export async function POST(request: NextRequest) {
  try {
    console.log('=== AI Enhancement API Called ===');
    const { originalContent, url, systemPrompt }: EnhanceRequest = await request.json();
    console.log('Request data:', { originalContent: originalContent?.substring(0, 100) + '...', url, hasSystemPrompt: !!systemPrompt });

    if (!originalContent) {
      console.log('Error: Missing original content');
      return NextResponse.json(
        { error: 'Original content is required' },
        { status: 400 }
      );
    }

    const prompt = systemPrompt || DEFAULT_SYSTEM_PROMPT;
    console.log('Using system prompt length:', prompt.length);

    console.log('Making AI API call...');
    
    const requestBody = {
      model: 'openrouter/anthropic/claude-sonnet-4',
      messages: [
        {
          role: 'system',
          content: prompt
        },
        {
          role: 'user',
          content: `Please enhance this website content from ${url}. Return only the complete HTML with embedded CSS:\n\n${originalContent}`
        }
      ],
      max_tokens: 4000,
      temperature: 0.7,
    };
    
    console.log('Request body:', JSON.stringify(requestBody, null, 2));
    
    const aiResponse = await fetch('https://oi-server.onrender.com/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer xxx',
        'CustomerId': 'cus_SGPn4uhjPI0F4w',
      },
      body: JSON.stringify(requestBody),
    });
    
    console.log('AI API response status:', aiResponse.status, aiResponse.statusText);

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('AI API Error:', aiResponse.status, aiResponse.statusText, errorText);
      return NextResponse.json(
        { error: `Failed to enhance website with AI: ${aiResponse.status} ${aiResponse.statusText}`, details: errorText },
        { status: 500 }
      );
    }

    const aiData: AIResponse = await aiResponse.json();
    console.log('AI response received:', {
      choices: aiData.choices?.length || 0,
      hasContent: !!aiData.choices?.[0]?.message?.content
    });
    
    if (!aiData.choices || aiData.choices.length === 0) {
      console.log('No choices in AI response');
      return NextResponse.json(
        { error: 'No enhancement generated by AI' },
        { status: 500 }
      );
    }

    const enhancedContent = aiData.choices[0].message.content;
    console.log('Enhanced content length:', enhancedContent.length);
    console.log('Enhanced content preview:', enhancedContent.substring(0, 200) + '...');

    // Clean up the response to ensure it's valid HTML
    let cleanedContent = enhancedContent.trim();
    
    // Remove markdown code blocks if present
    if (cleanedContent.includes('```html')) {
      const match = cleanedContent.match(/```html\n([\s\S]*?)\n```/);
      if (match) {
        cleanedContent = match[1];
      }
    } else if (cleanedContent.includes('```')) {
      const match = cleanedContent.match(/```\n([\s\S]*?)\n```/);
      if (match) {
        cleanedContent = match[1];
      }
    }

    // Ensure the content starts with <!DOCTYPE html> or <html>
    if (!cleanedContent.toLowerCase().includes('<!doctype html>') && 
        !cleanedContent.toLowerCase().startsWith('<html')) {
      cleanedContent = `<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>Enhanced Website</title>\n</head>\n<body>\n${cleanedContent}\n</body>\n</html>`;
    }

    console.log('Final cleaned content length:', cleanedContent.length);
    console.log('Enhancement completed successfully');

    return NextResponse.json({
      enhancedContent: cleanedContent,
      originalUrl: url,
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    console.error('Enhancement error (detailed):', error);
    console.error('Error type:', typeof error);
    console.error('Error message:', error instanceof Error ? error.message : 'Unknown error');
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack');
    return NextResponse.json(
      { error: 'Internal server error during enhancement', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'AI Website Enhancement API',
    endpoint: 'POST /api/enhance-website',
    parameters: {
      originalContent: 'string (required) - The original website HTML content',
      url: 'string (required) - The original website URL',
      systemPrompt: 'string (optional) - Custom system prompt for AI enhancement'
    },
    defaultSystemPrompt: DEFAULT_SYSTEM_PROMPT
  });
}